from sqlalchemy import Enum, String, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column
from enum import Enum as PyEnum

from .entity import Entity


class RentityStatus(PyEnum):
    """
    Status of a real entity.

    The following statuses are possible:

    Default: unlinked entity, assumed as a real entity.
    Automatic: linked automatically by enetity resolution algorithms.
    Confirmed: linked by the user.
    Source: in the source transcription an identity link was recorded as "sameas" or "sameas"
    """
    DEFAULT = "Default"  # unlinked entity
    AUTOMATIC = "Automatic"  # linked automatically
    CONFIRMED = "Confirmed"  # confirmed by the user
    SOURCE = "Source"  # generated by sameas or xsameas in the source


class Rentity(Entity):
    """
    Represents Real Entities in the database. Real Entities are the result of Entity Resolution.

    Real entities are the result of entity resolution.
    They aggregate the information of several entities
    in the database that are believed to represent the same real-world entity.

    The representation supports reversing the entity resolution
    process. A mapping between the real entity and the entities
    that compose it is maintained in the `links` table.

    Note that it is possible for an occurrence to be linked
    to more than one real entity. This can happen when the
    different users have different opinions about the identity
    of the entities.

    We use the term "rentity" to avoid confusion with the term "entity",
    and often use to unlinked entities as "occurrences".
    """
    __tablename__ = "rentities"
    __mapper_args__ = {"polymorphic_identity": "rentity"}

    id: Mapped[str] = mapped_column(String,
                                    ForeignKey("entity.id"),
                                    primary_key=True,
                                    on_delete="CASCADE")
    user: Mapped[str] = mapped_column(String)  # user that identified this real entity
    description: Mapped[str] = mapped_column(String)  # description of the real entity
    status: Mapped[RentityStatus] =
            mapped_column(Enum(RentityStatus),
                          nullable=False)  # status of the real entity
    obs: Mapped[str] = mapped_column(String)  # observations about the real entity






