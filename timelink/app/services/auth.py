""" Authentication services

Authentication uses a self hosted fief service.

This module can launch a fief service in Docker and provide
functions for authenticating users and fetch perissions associated with
each user.

1. Creating a docker container for the fief service.

The docker fief service requires a set of configuration environment variables
when run for the first time. These variables are described at
 https://docs.fief.dev/self-hosting/environment-variables/

In order to use the fief service from timelink the following
values must be shared between the container and the timelink client code:

1. CLIENT_ID (can be autogenerated and used to start container)
2. CLIENT_SECRET (can be autogenerated and used to start container)
3. ADMIN_USER_EMAIL (must be supplied by the user)
4. ADMIN_USER_PASSWORD (must be supplied hy user)

The required variables to create a local docker container can be
produced by running an interactive setup script with:

    docker run -it --rm ghcr.io/fief-dev/fief:latest fief quickstart --docker

This script asks the user for the email and password of an admin user and generates
the docker run command with default values for the required env variables.

One of these variables is ENCRYPTION_KEY which has specific requirements.
It can be generated online at  https://docs.fief.dev/self-hosting/environment-variables/
(scrolling down to the generator form).

timelink accesses those values through the timelink.app.backend.settings.Settings class,
which reads those and other environment values from the file .timelink.env in the user home directory.

To access the fief service from python three variables are necessary:

1. FIEF_URL the url running the fief service
2. FIEF_CLIENT_ID Must match the container variable
3. FIEF_CLIENT_SECRET Must match the container variable

fief_url = os.getenv("FIEF_URL")
fief_key = os.getenv("FIEF_KEY")
fief_secret = os.getenv("FIEF_SECRET")



"""

import os
import secrets
import uuid
import logging
from time import sleep
from cryptography.fernet import Fernet

import docker
from typing import Optional
from typing_extensions import Dict
from fastapi import Request, Response, HTTPException, status
from fastapi.security import APIKeyCookie

# see https://docs.fief.dev/integrate/python/fastapi/#web-application-example
from fief_client import FiefAsync, FiefUserInfo
from fief_client.integrations.fastapi import FiefAuth

from timelink.global_utilities import is_docker_running, get_container_by_name


class CustomFiefAuth(FiefAuth):
    """We customize the FiefAuth helper to fit our needs

    The base class is implemented with an API scenario in mind.
    Nevertheless, it's designed in a way you can customize its
    behavior when the user is not authenticated or has not the
    required scope.

    That's what'll do with the get_unauthorized_response.

    See https://fief-dev.github.io/fief-python/fief_client/integrations/fastapi.html#FiefAuth.__init__

    """

    client: FiefAsync

    async def get_unauthorized_response(self, request: Request, response: Response):
        redirect_uri = request.url_for("auth_callback")
        auth_url = await self.client.auth_url(redirect_uri, scope=["openid"])
        # Redirect to the Fief auth URL
        raise HTTPException(
            status_code=status.HTTP_307_TEMPORARY_REDIRECT,
            headers={"Location": str(auth_url)},
        )


class MemoryUserInfoCache:
    def __init__(self) -> None:
        self.storage: Dict[uuid.UUID, FiefUserInfo] = {}

    async def get(self, user_id: uuid.UUID) -> Optional[FiefUserInfo]:
        return self.storage.get(user_id)

    async def set(self, user_id: uuid.UUID, userinfo: FiefUserInfo) -> None:
        self.storage[user_id] = userinfo


memory_userinfo_cache = MemoryUserInfoCache()


async def get_memory_userinfo_cache() -> MemoryUserInfoCache:
    return memory_userinfo_cache


# migrate to Settings and init FiefServer from main.py
fief_url = os.getenv("FIEF_URL")
fief_client_id = os.getenv("FIEF_CLIENT_ID")
fief_client_secret = os.getenv("FIEF_CLIENT_SECRET")

# migrated to FiefServer class
fief = FiefAsync(fief_url, fief_client_id, fief_client_secret)

SESSION_COOKIE_NAME = "user_session"
scheme = APIKeyCookie(name=SESSION_COOKIE_NAME, auto_error=False)
auth = CustomFiefAuth(
    fief,
    scheme,
    get_userinfo_cache=get_memory_userinfo_cache,
)


def generate_key() -> bytes:
    return Fernet.generate_key()


def get_fief_container(start=True, tag=None) -> docker.models.containers.Container:
    """Check if there is a fief container

    Args:
        start (bool): Start the container if not running
        tag (str): Tag to use

       """
    return get_container_by_name("ghcr.io/fief-dev/fief:latest", start=start, tag=tag)


# start a fief container
def start_fief_server(
    fief_image="ghcr.io/fief-dev/fief:latest",
    fief_version="latest",
    update=False,
    reuse=True,
    fief_server_port=8000,
    fief_external_port=8000,
    fief_host: str = "localhost",
    ssl: bool = False,  # if fief is going to accessed through ssl
    fief_main_user_email: str = None,
    fief_main_user_password: str = None,
) -> docker.models.containers.Container:
    """Start a Fief server container

    Args:
        fief_image (str): Fief image to use
        fief_version (str): Fief version to use
        update (bool): Update the image
        reuse (bool): Reuse the container
        main_user_email (str): Main user email, if None Settings.fief_main_user_email is used
        main_user_password (str): Main user password, if None Settings.fief_main_user_password is used
        fief_server_port (int): Fief server port, default 8000
        fief_external_port (int): Fief external port, default 8000
        fief_domain (str): Fief domain, default localhost:8000

        Returns:
            docker.models.containers.Container: Fief container

        The current docker tool sets the following variables

        SECRET=XXX    # any long string
        FIEF_CLIENT_ID=XXX
        FIEF_CLIENT_SECRET=XXX
        ENCRYPTION_KEY=XXX
        PORT=8000
        FIEF_DOMAIN=localhost:8000
        CSRF_COOKIE_SECURE=False  # should be true in production
        LOGIN_SESSION_COOKIE_SECURE=False
        SESSION_COOKIE_SECURE=False
        FIEF_ADMIN_SESSION_COOKIE_SECURE=False

        For all configuration options see https://docs.fief.dev/self-hosting/environment-variables/
    """
    if is_docker_running() is False:
        raise RuntimeError("Docker is not running")

    exists = get_fief_container(tag=fief_version, start=False)

    client = docker.from_env()
    if update is True:
        if fief_version is None:
            get_version = "latest"
        else:
            get_version = fief_version

        # Pull the latest image
        latest_image = client.images.pull(fief_image, tag=get_version)

        # Get the currently used image
        current_image = client.images.get(f"{fief_image}:{get_version}")

        # Compare the IDs
        if latest_image.id != current_image.id:
            logging.info("A newer version is available.")
            if exists is not None:
                logging.info("Current container was stopped and removed.")
                exists.stop()
                exists.remove()
                exists = None

        else:
            logging.info("You are using Fief %s (updated)", get_version)

    if exists is not None:
        if reuse:
            return exists
        else:  # if exists and not reuse stop existing
            exists.stop()
            exists.remove()

    # for documentation on fief environment variables see
    # https://docs.fief.dev/self-hosting/environment-variables/
    fief_env = {
        "SECRET": secrets.token_urlsafe(64),
        "FIEF_CLIENT_ID": secrets.token_urlsafe(),
        "FIEF_CLIENT_SECRET": secrets.token_urlsafe(),
        "ENCRYPTION_KEY": generate_key().decode("utf-8"),
        "PORT": fief_server_port,
        "FIEF_DOMAIN": f"{fief_host}:{fief_external_port}",
        "FIEF_MAIN_USER_EMAIL": fief_main_user_email,
        "FIEF_MAIN_USER_PASSWORD": fief_main_user_password,
    }
    if not ssl:
        fief_env.update(
            {
                "CSRF_COOKIE_SECURE": False,
                "SESSION_DATA_COOKIE_SECURE": False,
                "USER_LOCALE_COOKIE_SECURE": False,
                "LOGIN_HINT_COOKIE_SECURE": False,
                "LOGIN_SESSION_COOKIE_SECURE": False,
                "REGISTRATION_SESSION_COOKIE_SECURE": False,
                "SESSION_COOKIE_SECURE": False,
                "FIEF_ADMIN_SESSION_COOKIE_SECURE": False,
            }
        )

    fief_container = client.containers.run(
        image=f"{fief_image}:{fief_version}",
        name="fief-server",
        detach=True,
        ports={f"{fief_server_port}/tcp": fief_external_port},
        environment=fief_env,
        mounts=[],
    )

    timeout = 15
    stop_time = 1
    elapsed_time = 0
    # this necessary to get the status
    cont = client.containers.get(fief_container.id)
    while cont.status not in ["running"] and elapsed_time < timeout:
        sleep(stop_time)
        cont = client.containers.get(fief_container.id)
        elapsed_time += stop_time
    if cont.status != "running":
        raise RuntimeError("fief server did not start")

    return fief_container


class FiefServer:

    SESSION_COOKIE_NAME = "user_session"
    fief_container: docker.models.containers.Container = None

    def __init__(
        self,
        update=False,
        reuse=True,
        main_user_email=None,
        main_user_password=None,
        fief_url=None,
        fief_key=None,
        fief_secret=None,
        fief_image="ghcr.io/fief-dev/fief:latest",
        fief_version="latest",
        fief_server_port=8000,
        fief_external_port=8000,
        fief_domain="localhost:8000",
    ) -> None:
        self.fief_image = fief_image
        self.fief_version = fief_version
        self.update = update
        self.reuse = reuse
        self.main_user_email = main_user_email
        self.main_user_password = main_user_password
        self.fief_server_port = fief_server_port
        self.fief_external_port = fief_external_port
        self.fief_domain = fief_domain

        self.fief = FiefAsync(fief_url, fief_key, fief_secret)

        self.scheme = APIKeyCookie(name=SESSION_COOKIE_NAME, auto_error=False)
        self.auth = CustomFiefAuth(
            fief,
            scheme,
            get_userinfo_cache=get_memory_userinfo_cache,
        )
